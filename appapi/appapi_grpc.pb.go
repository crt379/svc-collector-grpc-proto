// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: appapi/appapi.proto

package appapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Appapi_Get_FullMethodName = "/service.collector.appapi.Appapi/Get"
)

// AppapiClient is the client API for Appapi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppapiClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
}

type appapiClient struct {
	cc grpc.ClientConnInterface
}

func NewAppapiClient(cc grpc.ClientConnInterface) AppapiClient {
	return &appapiClient{cc}
}

func (c *appapiClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReply)
	err := c.cc.Invoke(ctx, Appapi_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppapiServer is the server API for Appapi service.
// All implementations must embed UnimplementedAppapiServer
// for forward compatibility
type AppapiServer interface {
	Get(context.Context, *GetRequest) (*GetReply, error)
	mustEmbedUnimplementedAppapiServer()
}

// UnimplementedAppapiServer must be embedded to have forward compatible implementations.
type UnimplementedAppapiServer struct {
}

func (UnimplementedAppapiServer) Get(context.Context, *GetRequest) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAppapiServer) mustEmbedUnimplementedAppapiServer() {}

// UnsafeAppapiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppapiServer will
// result in compilation errors.
type UnsafeAppapiServer interface {
	mustEmbedUnimplementedAppapiServer()
}

func RegisterAppapiServer(s grpc.ServiceRegistrar, srv AppapiServer) {
	s.RegisterService(&Appapi_ServiceDesc, srv)
}

func _Appapi_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppapiServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Appapi_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppapiServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Appapi_ServiceDesc is the grpc.ServiceDesc for Appapi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Appapi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.collector.appapi.Appapi",
	HandlerType: (*AppapiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Appapi_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appapi/appapi.proto",
}
