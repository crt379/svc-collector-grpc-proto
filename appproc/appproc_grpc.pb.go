// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: appproc/appproc.proto

package appproc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Appproc_Get_FullMethodName = "/service.collector.appproc.Appproc/Get"
)

// AppprocClient is the client API for Appproc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppprocClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
}

type appprocClient struct {
	cc grpc.ClientConnInterface
}

func NewAppprocClient(cc grpc.ClientConnInterface) AppprocClient {
	return &appprocClient{cc}
}

func (c *appprocClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReply)
	err := c.cc.Invoke(ctx, Appproc_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppprocServer is the server API for Appproc service.
// All implementations must embed UnimplementedAppprocServer
// for forward compatibility
type AppprocServer interface {
	Get(context.Context, *GetRequest) (*GetReply, error)
	mustEmbedUnimplementedAppprocServer()
}

// UnimplementedAppprocServer must be embedded to have forward compatible implementations.
type UnimplementedAppprocServer struct {
}

func (UnimplementedAppprocServer) Get(context.Context, *GetRequest) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAppprocServer) mustEmbedUnimplementedAppprocServer() {}

// UnsafeAppprocServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppprocServer will
// result in compilation errors.
type UnsafeAppprocServer interface {
	mustEmbedUnimplementedAppprocServer()
}

func RegisterAppprocServer(s grpc.ServiceRegistrar, srv AppprocServer) {
	s.RegisterService(&Appproc_ServiceDesc, srv)
}

func _Appproc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppprocServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Appproc_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppprocServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Appproc_ServiceDesc is the grpc.ServiceDesc for Appproc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Appproc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.collector.appproc.Appproc",
	HandlerType: (*AppprocServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Appproc_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appproc/appproc.proto",
}
